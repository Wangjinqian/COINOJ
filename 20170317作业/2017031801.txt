#include <iostream>

using namespace std;

class Base
{
protected:
    int x;
public:
    Base(int xtemp):x(xtemp)
    {
        cout<<"Base = "<<x<<" is created."<<endl;
    }
    Base(const Base &basetemp)
    {
        x=basetemp.x;
        cout<<"Base = "<<x<<" is copied."<<endl;
    }
    ~Base()
    {
        cout<<"Base = "<<x<<" is erased."<<endl;
    }
};

class Derived:public Base
{
private:
    int y;
public:
    Derived(int xtemp,int ytemp):Base(xtemp),y(ytemp)
    {
        cout<<"Derived = "<<y<<" is created."<<endl;
    }
    Derived(const Derived & dertemp):Base(dertemp),y(dertemp.y)
    {
        cout<<"Derived = "<<y<<" is copied."<<endl;
    }

    ~Derived()
    {
        cout<<"Derived = "<<y<<" is erased."<<endl;
    }
};


int main()
{
    freopen("in.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int cases, data1, data2;
    cin>>cases;
    for (int i = 0; i < cases; i++)
    {
        cin>>data1>>data2;
        Base base1(data1), base2(base1);

        Derived derived1(data1, data2),derived2(derived1);
    }
}